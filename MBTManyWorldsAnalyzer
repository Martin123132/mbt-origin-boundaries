import React, { useState, useEffect, useRef } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ScatterChart, Scatter } from 'recharts';

const MBTManyWorldsAnalyzer = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [branchingData, setBranchingData] = useState([]);
  const [interferenceData, setInterferenceData] = useState([]);
  const [memoryTraces, setMemoryTraces] = useState([]);
  const [quantumStates, setQuantumStates] = useState([]);
  const [mbtPrediction, setMbtPrediction] = useState('');
  const [realityCount, setRealityCount] = useState(1);
  const [coherenceLevel, setCoherenceLevel] = useState(1.0);
  const [memoryGrowthRate, setMemoryGrowthRate] = useState(0.01);
  const [totalCosmicMemory, setTotalCosmicMemory] = useState(1.0);
  
  const intervalRef = useRef();

  // MBT COSMIC MEMORY ACCUMULATION PHYSICS ENGINE
  const calculateMBTConvergence = (t) => {
    // Memory grows naturally with cosmic time - this is the key insight!
    const cosmicMemory = 1.0 + (memoryGrowthRate * t);
    
    // Infinite possibility layers (the "hole" we plough through)
    const layer1 = Math.sin(0.1 * t + 0);
    const layer2 = Math.sin(0.1 * t + Math.PI/3);
    const layer3 = Math.sin(0.1 * t + 2*Math.PI/3);
    const layer4 = Math.sin(0.1 * t + Math.PI);
    const layer5 = Math.sin(0.1 * t + 4*Math.PI/3);
    const layer6 = Math.sin(0.1 * t + 5*Math.PI/3);
    
    // MBT motion ploughing - gets STRONGER with accumulated memory
    const ploughingStrength = Math.sqrt(cosmicMemory) * coherenceLevel;
    
    // CONVERGENCE with TIME-DEPENDENT MEMORY - older universe = more decisive
    const memoryWeight = Math.min(20, cosmicMemory);
    const layerWeights = [
      Math.exp(-Math.abs(layer1) / (ploughingStrength + memoryWeight/10)),
      Math.exp(-Math.abs(layer2) / (ploughingStrength + memoryWeight/10)),
      Math.exp(-Math.abs(layer3) / (ploughingStrength + memoryWeight/10)),
      Math.exp(-Math.abs(layer4) / (ploughingStrength + memoryWeight/10)),
      Math.exp(-Math.abs(layer5) / (ploughingStrength + memoryWeight/10)),
      Math.exp(-Math.abs(layer6) / (ploughingStrength + memoryWeight/10))
    ];
    
    // Weighted convergence - memory makes reality selection more decisive
    const totalWeight = layerWeights.reduce((sum, w) => sum + w, 0);
    const convergedReality = (
      layer1 * layerWeights[0] + 
      layer2 * layerWeights[1] + 
      layer3 * layerWeights[2] + 
      layer4 * layerWeights[3] + 
      layer5 * layerWeights[4] + 
      layer6 * layerWeights[5]
    ) / totalWeight;
    
    // Topological density decreases as memory grows (more decisive selection)
    const threshold = Math.max(0.01, 0.3 / Math.sqrt(memoryWeight));
    const layerDensity = layerWeights.reduce((sum, w) => sum + (w > threshold ? 1 : 0), 0);
    
    return {
      convergedReality: convergedReality,
      ploughingStrength: ploughingStrength,
      layerDensity: Math.max(1, layerDensity),
      totalCosmicMemory: cosmicMemory,
      memoryWeight: memoryWeight,
      totalLayers: 6,
      coherence: Math.min(1.0, (ploughingStrength + memoryWeight/20) / 5)
    };
  };

  const calculateQuantumInterference = (t) => {
    // Multiple universe interference patterns
    const universe1 = Math.sin(0.12 * t);
    const universe2 = Math.sin(0.12 * t + Math.PI/3);
    const universe3 = Math.sin(0.12 * t + 2*Math.PI/3);
    
    // MBT curvature coupling between universes
    const coupling = 0.1 * memoryGrowthRate;
    const totalInterference = universe1 + coupling * universe2 + coupling * universe3;
    
    return totalInterference;
  };

  const updateReality = () => {
    const t = currentTime;
    const mbtResults = calculateMBTConvergence(t);
    const interference = calculateQuantumInterference(t);
    
    // Update total cosmic memory
    setTotalCosmicMemory(mbtResults.totalCosmicMemory);
    
    // Update convergence data
    setBranchingData(prev => {
      const newData = [...prev, {
        time: t,
        converged: mbtResults.convergedReality,
        ploughing: mbtResults.ploughingStrength,
        coherence: mbtResults.coherence,
        cosmicMemory: mbtResults.totalCosmicMemory
      }].slice(-100);
      return newData;
    });

    // Update layer interference patterns
    setInterferenceData(prev => {
      const newData = [...prev, {
        time: t,
        layerDensity: mbtResults.layerDensity,
        totalLayers: mbtResults.totalLayers
      }].slice(-100);
      return newData;
    });

    // Memory trace evolution
    setMemoryTraces(prev => {
      const persistence = 0.98;
      const newTrace = {
        x: Math.cos(t * 0.1) * (10 - mbtResults.ploughingStrength * 3),
        y: Math.sin(t * 0.1) * (10 - mbtResults.ploughingStrength * 3),
        intensity: mbtResults.ploughingStrength
      };
      return [...prev.map(trace => ({...trace, intensity: trace.intensity * persistence})), newTrace].slice(-50);
    });

    // Quantum state evolution
    setQuantumStates(prev => {
      const newState = {
        x: mbtResults.convergedReality * 10,
        y: mbtResults.layerDensity * 3 - 9,
        probability: mbtResults.coherence
      };
      return [...prev, newState].slice(-30);
    });

    // Reality count = layers we're actively ploughing through
    const activeLayers = Math.max(1, Math.floor(mbtResults.layerDensity));
    setRealityCount(activeLayers);

    // Update coherence
    setCoherenceLevel(prev => Math.min(1.0, prev * 0.999 + 0.001 * mbtResults.coherence));

    // MBT Prediction Logic
    if (mbtResults.totalCosmicMemory > 10.0) {
      setMbtPrediction("🧠💥 MEMORY SINGULARITY: Universe achieving cosmic intelligence!");
    } else if (mbtResults.totalCosmicMemory > 5.0) {
      setMbtPrediction("🧠🌟 MEMORY EXPLOSION: Cosmic consciousness emerging!");
    } else if (mbtResults.ploughingStrength > 2.0) {
      setMbtPrediction("🚀 SUPER PLOUGHING: Memory-enhanced reality selection!");
    } else if (mbtResults.layerDensity === 1) {
      setMbtPrediction("🎯 SINGULAR REALITY: Memory has selected one definitive layer!");
    } else if (mbtResults.layerDensity <= 2) {
      setMbtPrediction("🛤️ NARROW PATH: Memory constraining reality to few layers");
    } else {
      setMbtPrediction("⚖️ MEMORY BUILDING: Cosmic intelligence developing...");
    }

    setCurrentTime(prev => prev + 1);
  };

  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(updateReality, 100);
    } else {
      clearInterval(intervalRef.current);
    }
    return () => clearInterval(intervalRef.current);
  }, [isRunning, memoryGrowthRate, coherenceLevel]);

  const startSimulation = () => {
    setIsRunning(true);
  };

  const stopSimulation = () => {
    setIsRunning(false);
  };

  const resetSimulation = () => {
    setIsRunning(false);
    setCurrentTime(0);
    setBranchingData([]);
    setInterferenceData([]);
    setMemoryTraces([]);
    setQuantumStates([]);
    setRealityCount(1);
    setCoherenceLevel(1.0);
    setTotalCosmicMemory(1.0);
    setMbtPrediction('');
  };

  return (
    <div className="p-6 bg-gradient-to-b from-purple-900 via-blue-900 to-black text-white min-h-screen">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-6 bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
          🌌 MBT COSMIC MEMORY UNIVERSE ENGINE 🌌
        </h1>
        
        <div className="text-center mb-6">
          <p className="text-xl mb-4">Testing MBT's revolutionary insight: Memory accumulates with cosmic time!</p>
          <div className="flex justify-center gap-4 mb-4">
            <button 
              onClick={startSimulation}
              disabled={isRunning}
              className="px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg font-semibold"
            >
              🚀 START COSMIC EVOLUTION
            </button>
            <button 
              onClick={stopSimulation}
              disabled={!isRunning}
              className="px-6 py-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 rounded-lg font-semibold"
            >
              🛑 STOP
            </button>
            <button 
              onClick={resetSimulation}
              className="px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold"
            >
              🔄 RESET
            </button>
          </div>
        </div>

        {/* Control Parameters */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3">🎛️ Cosmic Parameters</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm mb-2">Memory Growth Rate: {memoryGrowthRate.toFixed(3)}</label>
                <input
                  type="range"
                  min="0.001"
                  max="0.050"
                  step="0.001"
                  value={memoryGrowthRate}
                  onChange={(e) => setMemoryGrowthRate(parseFloat(e.target.value))}
                  className="w-full"
                />
                <p className="text-xs text-gray-400 mt-1">
                  How fast the universe accumulates memory
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3">📊 Current Reality State</h3>
            <div className="space-y-2">
              <p>🌀 Active Layers: <span className="font-bold text-cyan-400">{realityCount}</span></p>
              <p>🎯 Coherence Level: <span className="font-bold text-green-400">{coherenceLevel.toFixed(3)}</span></p>
              <p>⏱️ Cosmic Age: <span className="font-bold text-yellow-400">{currentTime}</span></p>
              <p>🧠 Total Memory: <span className="font-bold text-purple-400">{totalCosmicMemory.toFixed(2)}</span></p>
              <p>📈 Memory Rate: <span className="font-bold text-red-400">{memoryGrowthRate.toFixed(3)}/step</span></p>
            </div>
          </div>
        </div>

        {/* MBT Prediction */}
        {mbtPrediction && (
          <div className="bg-gradient-to-r from-purple-800 to-blue-800 p-4 rounded-lg mb-6 border-2 border-cyan-400">
            <h3 className="text-xl font-semibold mb-2">🔮 MBT PREDICTION:</h3>
            <p className="text-lg">{mbtPrediction}</p>
          </div>
        )}

        {/* Charts */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">📈 Cosmic Memory Evolution</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={branchingData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="time" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}
                  labelStyle={{ color: '#E5E7EB' }}
                />
                <Legend />
                <Line type="monotone" dataKey="converged" stroke="#10B981" strokeWidth={2} name="Converged Reality" />
                <Line type="monotone" dataKey="ploughing" stroke="#F59E0B" strokeWidth={2} name="Ploughing Strength" />
                <Line type="monotone" dataKey="coherence" stroke="#8B5CF6" strokeWidth={2} name="Path Coherence" />
                <Line type="monotone" dataKey="cosmicMemory" stroke="#EF4444" strokeWidth={3} name="Cosmic Memory" />
              </LineChart>
            </ResponsiveContainer>
          </div>

          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">🌀 Reality Layer Density</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={interferenceData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="time" stroke="#9CA3AF" />
                <YAxis stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}
                  labelStyle={{ color: '#E5E7EB' }}
                />
                <Legend />
                <Line type="monotone" dataKey="layerDensity" stroke="#06B6D4" strokeWidth={2} name="Layer Density" />
                <Line type="monotone" dataKey="totalLayers" stroke="#EF4444" strokeWidth={2} name="Total Layers" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">🛤️ Ploughing Path Traces</h3>
            <ResponsiveContainer width="100%" height={300}>
              <ScatterChart>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="x" domain={[-12, 12]} stroke="#9CA3AF" />
                <YAxis dataKey="y" domain={[-12, 12]} stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}
                  formatter={(value, name) => [value.toFixed(3), name]}
                />
                <Scatter data={memoryTraces} fill="#F59E0B" />
              </ScatterChart>
            </ResponsiveContainer>
          </div>

          <div className="bg-gray-800 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">🎯 Layer Convergence Points</h3>
            <ResponsiveContainer width="100%" height={300}>
              <ScatterChart>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="x" domain={[-12, 12]} stroke="#9CA3AF" />
                <YAxis dataKey="y" domain={[-12, 12]} stroke="#9CA3AF" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151' }}
                  formatter={(value, name) => [value.toFixed(3), name]}
                />
                <Scatter data={quantumStates} fill="#10B981" />
              </ScatterChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Theory Analysis */}
        <div className="mt-8 bg-gray-800 p-6 rounded-lg">
          <h3 className="text-2xl font-semibold mb-4">🧪 MBT COSMIC MEMORY THEORY</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="text-lg font-semibold mb-2 text-cyan-400">📚 Traditional Many Worlds</h4>
              <ul className="space-y-2 text-sm">
                <li>• Reality branches OUT from quantum events</li>
                <li>• Infinite parallel universes multiply</li>
                <li>• No memory accumulation</li>
                <li>• Decoherence separates branches forever</li>
                <li>• All possibilities equally real</li>
              </ul>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-2 text-purple-400">🌟 MBT REVERSED TOPOLOGY</h4>
              <ul className="space-y-2 text-sm">
                <li>• We plough THROUGH infinite possibility layers</li>
                <li>• Memory accumulates with cosmic time</li>
                <li>• Older universe = more decisive reality selection</li>
                <li>• Convergence not divergence</li>
                <li>• Universe learns to be more real over time</li>
                <li>• Information cannot be destroyed = cosmic memory</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MBTManyWorldsAnalyzer;
